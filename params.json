{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Node-batchflow","tagline":"Batch process collections in parallel or sequentially.","body":"\r\nNode.js - batchflow\r\n===================\r\n\r\n[![build status](https://secure.travis-ci.org/jprichardson/node-batchflow.png)](http://travis-ci.org/jprichardson/node-batchflow)\r\n\r\nBatch process collections in parallel or sequentially.\r\n\r\n\r\nWhy?\r\n----\r\n\r\nI really got tired of writing the following patterns over and over again:\r\n\r\n**Sequential:**\r\n\r\n```javascript\r\nvar files = [... list of files ...];\r\nfunction again(x) {\r\n\tif (x < files.length) {\r\n\t\tfs.readFile(files[x], function(err, data) {\r\n\t\t\t//... do something with data ...\r\n\t\t\tagain(x + 1);\r\n\t\t});\r\n\t} else {\r\n\t\tconsole.log('Done.');\r\n\t}\r\n}\r\n\r\nagain(0);\r\n```\r\n\r\nor..\r\n\r\n**Parallel:**\r\n\r\n```javascript\r\nvar files = [... list of files ...];\r\nvar pending = 0;\r\nfiles.forEach(function(file, i) {\r\n\tpending += 1;\r\n\tfs.readFile(file, function(err, data) {\r\n\t\t//... do something with data ....\r\n\t\t\r\n\t\tpending -= 1;\r\n\t\tif (pending === 0 && i === files.length -1) {\r\n\t\t\tconsole.log('Done.');\r\n\t\t}\r\n\t});\r\n});\r\n```\r\n\r\nThat's ugly. For more complicated examples it requires a bit more thinking.\r\n\r\nWhy don't I use the wonderful library [async][1]? Well, `async` tries to do way too much. I also suffer from a severe case of NIH syndrome. Kidding, or else I'd rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is also very ugly and not CoffeeScript friendly.\r\n\r\n\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n    npm install batchflow\r\n\r\n\r\n\r\nExamples\r\n--------\r\n\r\n### 50 Foot Overview\r\n\r\n```javascript\r\nvar a = [\r\n        function(finished) { setTimeout(function(){finished(1)}, 1); }, //executes in 1 ms\r\n        function(finished) { setTimeout(function(){finished(2)}, 20); }, //executes in 20 ms\r\n        function(finished) { setTimeout(function(){finished(3)}, 2); } //executes in 2 ms\r\n    ];\r\n\r\n//sequential\r\nbatch(a).sequential()\r\n.each(function(i, item, done) {\r\n    item(done);\r\n}).end(function(results) {\r\n    for (var i = 0; i < results.length; ++i) {\r\n        console.log(results[i]);\r\n    }\r\n});\r\n\r\n/*\r\n  1\r\n  2\r\n  3\r\n*/\r\n\r\n//sequential\r\nbatch(a).parallel()\r\n.each(function(i, item, done) {\r\n    item(done);\r\n}).end(function(results) {\r\n    for (var i = 0; i < results.length; ++i) {\r\n        console.log(results[i]);\r\n    }\r\n});\r\n\r\n/*\r\n  1\r\n  3\r\n  2\r\n*/\r\n```\r\n\r\n### Arrays\r\n\r\nLet's rewrite the previous file patterns mentioned in **Why?** into a sequential example:\r\n\r\n**Sequential:**\r\n\r\n```javascript\r\nvar batch = require('batchflow');\r\n\r\nvar files = [... list of files ...];\r\nbatch(files).sequential()\r\n.each(function(i, item, done) {\r\n\tfs.readFile(item, function(err, data) {\r\n\t\t//do something with data\r\n\t\tdone(someResult);\r\n\t});\r\n}).end(function(results) {\r\n\t//analyze results\r\n});\r\n```\r\n\r\nHow about the parallel example?\r\n\r\n**Parallel:**\r\n \r\n ```javascript\r\nvar batch = require('batchflow');\r\n\r\nvar files = [... list of files ...];\r\nbatch(files).parallel()\r\n.each(function(i, item, done) {\r\n\tfs.readFile(item, function(err, data) {\r\n\t\t//do something with data\r\n\t\tdone(someResult); //<---- yes, you must still call done in parallel, this way we can know when to trigger `end()`.\r\n\t});\r\n}).end(function(results) {\r\n\t//analyze results\r\n});\r\n```\r\n\r\nWhat's that, your data is not stored in an array? Oh, you say it's stored in an object? That's OK too...\r\n\r\n### Objects\r\n\r\n**Sequential:**\r\n\r\n```javascript\r\nvar batch = require('batchflow');\r\n\r\nvar files = {'file1': 'path'.... 'filen': 'pathn'}\r\nbatch(files).sequential()\r\n.each(function(key, val, done) {\r\n\tfs.readFile(val, function(err, data) {\r\n\t\t//do something with data\r\n\t\tdone(someResult);\r\n\t});\r\n}).end(function(results) {\r\n\t//analyze results\r\n});\r\n```\r\n\r\nHow about the parallel example?\r\n\r\n**Parallel:**\r\n\r\n ```javascript\r\nvar batch = require('batchflow');\r\n\r\nvar files = {'file1': 'path'.... 'filen': 'pathn'}\r\nbatch(files).parallel()\r\n.each(function(key, val, done) {\r\n\tfs.readFile(val, function(err, data) {\r\n\t\t//do something with data\r\n\t\tdone(someResult);\r\n\t});\r\n}).end(function(results) {\r\n\t//analyze results\r\n});\r\n```\r\n\r\n### Misc\r\n\r\n1. Is `sequential()` or `parallel()` too long? Fine. `series()` and `seq()` are aliases for `sequential()` and `par()` is an alias for `parallel()`.\r\n2. You don't like the fluent API? That's OK too:\r\n\r\nNon-fluent API BatchFlow\r\n\r\n```javascript\r\nvar batch = require('batchflow');\r\nvar bf = batch(files);\r\nbf.isSequential = true;\r\n\r\nbf.each(function(i, file, done) {\r\n\tdone(someResult);\r\n});\r\n \r\nbf.end(function(results) {\r\n\t//blah blah\r\n});\r\n```\r\n\r\n### CoffeeScript\r\n\r\n```coffee\r\nbatch = require('batchflow')\r\nfiles = [... list of files ...]\r\nbf = batch(files).seq().each (i, file, done) ->\r\n  fs.readFile file, done\r\nbf.error (err) ->\r\n  console.log(err);\r\nbf.end (results) ->\r\n  console.log fr.toString() for fr in results\r\n```\r\n\r\n### Error Handling\r\n\r\nWhat's that, you want error handling? Well, you might as well call me Burger King... have it your way.\r\n\r\n```javascript\r\nvar a = {'f': '/tmp/file_DOES_NOT_exist_hopefully' + Math.random()};\r\nbatch(a).parallel().each(function(i, item, done) {\r\n    fs.readFile(item, done);\r\n}).error(function(err) {\r\n    assert(err);\r\n    done();\r\n}).end(function() {\r\n    assert(false); //<--- shouldn't get here\r\n});\r\n\r\n\r\nvar a = ['/tmp/file_DOES_NOT_exist_hopefully' + Math.random()];\r\nbatch(a).series().each(function(i, item, done) {\r\n    throw new Error('err');\r\n}).error(function(err) {\r\n    assert(err);\r\n    done();\r\n}).end(function() {\r\n    assert(false); //<--- shouldn't get here\r\n});\r\n\r\n```\r\n\r\n\r\nAuthor\r\n------\r\n\r\n`node-batchflow` was written by [JP Richardson][aboutjp]. You should follow him on Twitter [@jprichardson][twitter]. Also read his coding blog [Procbits][procbits]. If you write software with others, you should checkout [Gitpilot][gitpilot] to make collaboration with Git simple.\r\n\r\n\r\n\r\nLicense\r\n-------\r\n\r\n(MIT License)\r\n\r\nCopyright 2012, JP  <jprichardson@gmail.com>\r\n\r\n\r\n\r\n[1]: https://github.com/caolan/async/\r\n\r\n[aboutjp]: http://about.me/jprichardson\r\n[twitter]: http://twitter.com/jprichardson\r\n[procbits]: http://procbits.com\r\n[gitpilot]: http://gitpilot.com\r\n\r\n\r\n"}